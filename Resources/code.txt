############### VIEWS ###############

CREATE OR REPLACE VIEW `active_users` AS
SELECT u.`id`, u.`registered_no`, u.`name`, u.`mobile`, u.`email`, r.`role_name`, u.`room_no`, l.`password` 
FROM `login` l, `user` u, `role` r 
WHERE l.`id` = u.`id` AND u.`role_id` = r.`id` AND u.`is_deleted` = 0;



CREATE OR REPLACE VIEW `active_products` AS
SELECT p.`id`, p.`name`, c.`type`, p.`is_hide` 
FROM `product` p, `category` c 
WHERE p.`category_id` = c.`id` AND p.`is_deleted` = 0 
ORDER BY p.`is_hide` DESC, p.`name` ASC, c.`type` ASC;



CREATE OR REPLACE VIEW `inventory_for_owner` AS
SELECT i.`id`, p.`name`, c.`type`, i.`quantity`, i.`unit_price`, i.`inserted_at`, i.`expiry_at` 
FROM `inventory` i, `product` p, `category` c 
WHERE i.`product_id` = p.`id` AND p.`category_id` = c.`id` AND i.`quantity` > 0 AND i.`is_deleted` = 0 
ORDER BY i.`expiry_at` ASC;



CREATE OR REPLACE VIEW `inventory_for_customers` AS
SELECT i.`id`, p.`name`, c.`type`, i.`unit_price`, i.`quantity`
FROM `inventory` i, `product` p, `category` c 
WHERE i.`product_id` = p.`id` AND p.`category_id` = c.`id` AND p.`is_hide` = 0 AND i.`quantity` > 0 AND i.`is_deleted` = 0
ORDER BY RAND();


CREATE OR REPLACE VIEW `meals_for_owner` AS
SELECT i.`id`, p.`name`, i.`quantity`, i.`unit_price`, i.`inserted_at`, i.`expiry_at` 
FROM `inventory` i, `product` p, `category` c 
WHERE i.`product_id` = p.`id` AND p.`category_id` = c.`id` AND c.`type` = 'Meals' AND i.`quantity` > 0 AND i.`is_deleted` = 0 
ORDER BY i.`expiry_at` ASC;




############### PROCEDURES ###############

DROP PROCEDURE IF EXISTS myorders_for_owner;
DELIMITER //
CREATE PROCEDURE myorders_for_owner() 
BEGIN
SELECT o.`id`, p.`name`, c.`type`, u.`registered_no`, o.`quantity`, o.`quantity`*o.`unit_price` AS `total`, o.`ordered_at` 
FROM `orders` o, `product` p, `user` u, `category` c 
WHERE o.`item_id` = p.`id` AND o.`user_id` = u.`id` AND p.`category_id` = c.`id` AND o.`is_canceled` = 0
ORDER BY o.`ordered_at` ASC;
END//
DELIMITER ;

CALL myorders_for_owner();



DROP PROCEDURE IF EXISTS myorders_for_customers;
DELIMITER //
CREATE PROCEDURE myorders_for_customers(IN user_registered_no VARCHAR(5)) 
BEGIN
SELECT o.`id`, p.`name`, c.`type`, o.`quantity`, o.`quantity`*o.`unit_price` AS `total`, o.`ordered_at` 
FROM `orders` o, `product` p, `user` u, `category` c 
WHERE o.`item_id` = p.`id` AND o.`user_id` = u.`id` AND p.`category_id` = c.`id` AND o.`is_canceled` = 0 AND u.`registered_no` = user_registered_no 
ORDER BY o.`ordered_at` DESC;
END//
DELIMITER ;

CALL myorders_for_customers('TG001');



DROP PROCEDURE IF EXISTS add_orders_log;
DELIMITER //
CREATE PROCEDURE add_orders_log(IN customer_id INT) 
BEGIN
INSERT INTO `orders_log`(`item_id`, `user_id`, `quantity`, `total_price`, `ordered_at`) SELECT `item_id`, `user_id`, `quantity`, `unit_price`*`quantity` AS `total_price`, `ordered_at` FROM `orders` WHERE `user_id ` = customer_id;
END//
DELIMITER ;

CALL add_orders_log(1);



DROP PROCEDURE IF EXISTS profile_update;
DELIMITER //
CREATE PROCEDURE profile_update(IN user_registered_no VARCHAR(5), IN user_name VARCHAR(100), IN user_mobile CHAR(10), IN user_email VARCHAR(100), IN user_room_no CHAR(4)) 
BEGIN
UPDATE `user` SET `name`= user_name,`mobile`= user_mobile,`email`= user_email,`room_no`= user_room_no WHERE `registered_no` = user_registered_no;
END//
DELIMITER ;

CALL profile_update('TG001', 'Test Name', '0771234567', 'abc@fot.lk', 302);



DROP PROCEDURE IF EXISTS profile_password_update;
DELIMITER //
CREATE PROCEDURE profile_password_update(IN user_registered_no VARCHAR(5), IN user_old_password VARCHAR(255), IN user_new_password VARCHAR(255)) 
BEGIN
DECLARE  status VARCHAR(255);
IF user_check_old_password(user_registered_no, user_old_password) = 1 THEN
UPDATE `login` SET `password`= user_new_password WHERE `id` = (SELECT `id` FROM `user` WHERE `registered_no` = user_registered_no AND `is_deleted` = 0 LIMIT 1);
SET status = 'Updated';
ELSE
SET status = 'Old password Incorrect';
END IF;
SELECT status;
END//
DELIMITER ;

CALL profile_password_update('TG001', 'aaa', 'newpwd');



DROP PROCEDURE IF EXISTS user_account_create;
DELIMITER //
CREATE PROCEDURE user_account_create(IN user_registered_no VARCHAR(5), IN user_name VARCHAR(100), IN user_role_id INT) 
BEGIN
INSERT INTO `user`(`registered_no`, `name`, `role_id`) VALUES (user_registered_no , user_name, user_role_id);
END//
DELIMITER ;

CALL user_account_create('TG003', 'Test Name 1', 2);



DROP PROCEDURE IF EXISTS user_account_delete;
DELIMITER //
CREATE PROCEDURE user_account_delete(IN user_id VARCHAR(5)) 
BEGIN
UPDATE `user` SET `is_deleted`= 1 WHERE `id` = user_id AND `is_deleted` = 0;
END//
DELIMITER ;

CALL user_account_delete(8);



DROP PROCEDURE IF EXISTS product_create;
DELIMITER //
CREATE PROCEDURE product_create(IN product_name VARCHAR(100), IN product_category_id INT) 
BEGIN
INSERT INTO `product`(`name`, `category_id`) VALUES (product_name, product_category_id);
END//
DELIMITER ;

CALL product_create('Test Product', 2);



DROP PROCEDURE IF EXISTS product_delete;
DELIMITER //
CREATE PROCEDURE product_delete(IN product_id VARCHAR(5)) 
BEGIN
UPDATE `product` SET `is_deleted`= 1 WHERE `id` = product_id  AND `is_deleted` = 0;
END//
DELIMITER ;

CALL product_delete(7);



DROP PROCEDURE IF EXISTS inventory_create;
DELIMITER //
CREATE PROCEDURE inventory_create(IN inventory_id INT, IN product_quantity INT, IN product_unit_price FLOAT, IN product_expiry_at DATETIME) 
BEGIN
INSERT INTO `inventory`(`product_id`, `quantity`, `unit_price`, `expiry_at`) VALUES (inventory_id, product_quantity, product_unit_price, product_expiry_at);
END//
DELIMITER ;

CALL inventory_create(3, 300, 10.00, '2021-12-20 10:20:55');



DROP PROCEDURE IF EXISTS inventory_delete;
DELIMITER //
CREATE PROCEDURE inventory_delete(IN inventory_id INT) 
BEGIN
UPDATE `inventory` SET `is_deleted`= 1 WHERE `id` = inventory_id  AND `is_deleted` = 0;
END//
DELIMITER ;

CALL inventory_delete(6);



DROP PROCEDURE IF EXISTS place_order;
DELIMITER //
CREATE PROCEDURE place_order(IN inventory_id INT, IN order_quantity INT, IN order_unit_price FLOAT, IN user_id INT) 
BEGIN
INSERT INTO `orders`(`item_id`, `quantity`, `unit_price`, `user_id`) VALUES (inventory_id, order_quantity, order_unit_price, user_id);
END//
DELIMITER ;

CALL place_order(5, 10, 40.00, 5);



DROP PROCEDURE IF EXISTS cancel_order;
DELIMITER //
CREATE PROCEDURE cancel_order(IN order_id INT) 
BEGIN
UPDATE `orders` SET `is_canceled`= 1 WHERE `id` = order_id AND `is_canceled` = 0;
END//
DELIMITER ;

CALL cancel_order(5);



DROP PROCEDURE IF EXISTS get_last_transactions_amount;
DELIMITER //
CREATE PROCEDURE get_last_transactions_amount() 
BEGIN
SELECT * FROM `transactions` ORDER BY `transaction_date` DESC LIMIT 1;
END//
DELIMITER ;

CALL get_last_transactions_amount();




############### FUNCTIONS ###############

DROP FUNCTION IF EXISTS calculate_transactions_summery;
DELIMITER //
CREATE FUNCTION calculate_transactions_summery() RETURNS FLOAT DETERMINISTIC
BEGIN
DECLARE transactions_amount FLOAT DEFAULT 0.0;
SELECT SUM(`quantity`*`total_price`) INTO transactions_amount 
FROM `orders_log` 
WHERE DATE(`delivered_at`) = DATE(NOW()) 
GROUP BY `delivered_at`;
RETURN (transactions_amount);
END//
DELIMITER ;



DROP FUNCTION IF EXISTS user_check_old_password;
DELIMITER //
CREATE FUNCTION user_check_old_password(user_registered_no VARCHAR(5), user_old_password VARCHAR(255)) RETURNS INT
BEGIN
DECLARE  pwd VARCHAR(255);
DECLARE  status INT;
SELECT l.`password` INTO pwd FROM `user` u, `login` l WHERE u.`id` = l.`id` AND u.`registered_no` = user_registered_no AND `is_deleted` = 0 LIMIT 1;
IF pwd = user_old_password THEN
SET status = 1;
ELSE
SET status = 0;
END IF;
RETURN (status);
END//
DELIMITER ;




############### TRIGGERS ###############

DROP TRIGGER IF EXISTS TR_after_user_insert;
DELIMITER //
CREATE TRIGGER TR_after_user_insert AFTER INSERT ON user
FOR EACH ROW
BEGIN
INSERT INTO `login`(`id`, `password`) VALUES (NEW.`id`, 'Student@pwd');
END//
DELIMITER ;



DROP TRIGGER IF EXISTS TR_after_orders_insert;
DELIMITER //
CREATE TRIGGER TR_after_orders_insert AFTER INSERT ON orders
FOR EACH ROW
BEGIN
UPDATE `inventory` SET `quantity`= (`quantity`-NEW.`quantity`) WHERE `id` = NEW.`item_id` AND `is_deleted` = 0;
END//
DELIMITER ;



DROP TRIGGER IF EXISTS TR_after_orders_cancel;
DELIMITER //
CREATE TRIGGER TR_after_orders_cancel AFTER UPDATE ON orders
FOR EACH ROW
BEGIN
UPDATE `inventory` SET `quantity`= (`quantity`+NEW.`quantity`) WHERE `id` = NEW.`item_id` AND `is_deleted` = 0;
END//
DELIMITER ;



DROP TRIGGER IF EXISTS TR_after_orders_log_insert;
DELIMITER //
CREATE TRIGGER TR_after_orders_log_insert AFTER INSERT ON orders_log
FOR EACH ROW
BEGIN
DELETE FROM `orders` WHERE `item_id` NEW.`item_id` = AND `user_id` = NEW.`user_id` AND `ordered_at` = NEW.`ordered_at` AND `is_canceled` = 0;
END//
DELIMITER ;




############### EVENTS ###############

SET GLOBAL EVENT_SCHEDULER = ON;
DROP EVENT IF EXISTS add_daily_transaction_summery;
CREATE EVENT add_daily_transaction_summery 
ON SCHEDULE EVERY 1 DAY
STARTS CONCAT(DATE(NOW()), ' 23:59:55')
ON COMPLETION PRESERVE
DO
INSERT INTO `transactions`(`transaction_date`, `total_amount`) VALUES (DATE(NOW()), calculate_transactions_summery());